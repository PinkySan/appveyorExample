name: SonarCloud-Runner
on:
  push:
  #   branches:
  #     - master
  # pull_request:
  #   types: [opened, synchronize, reopened]
jobs:
  sonarcloud:
    name: SonarCloud
    runs-on: ubuntu-18.04
    env: 
      SONAR_SCANNER_VERSION: 4.6.0.2311
    steps:
      - name: create folder
        run: mkdir $HOME/.sonar/
      - name: download and extract sonar-scanner
        run: |
          curl -sSLo $HOME/.sonar/sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-$SONAR_SCANNER_VERSION-linux.zip
          unzip -o $HOME/.sonar/sonar-scanner.zip -d $HOME/.sonar/
          echo "$HOME/.sonar/sonar-scanner-$SONAR_SCANNER_VERSION-linux/bin" >> $GITHUB_PATH
      - name: download and extract the build-wrapper
        run: |
          curl -sSLo $HOME/.sonar/build-wrapper-linux-x86.zip https://sonarcloud.io/static/cpp/build-wrapper-linux-x86.zip
          unzip -o $HOME/.sonar/build-wrapper-linux-x86.zip -d $HOME/.sonar/
          echo "$HOME/.sonar/build-wrapper-linux-x86" >> $GITHUB_PATH
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: 3
      - name: install the build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install conan
          conan profile new default --detect
      - name: Setting up remotes
        run: conan remote add catch2 https://api.bintray.com/conan/catchorg/Catch2
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis    
      - name: install conan dependencies
        run: conan install . -if build -s compiler.libcxx=libstdc++11 -s build_type=Release
      - name: cmake
        run: cmake -S . -B build -DCMAKE_BUILD_TYPE:STRING=Release -DCMAKE_TOOLCHAIN_FILE:PATH=./build/conan_paths.cmake
      - name: build
        run: build-wrapper-linux-x86-64 --out-dir build_wrapper_output_directory cmake --build build/ --config Release
      - name: test
        run: |
          cd build
          ctest -j 4 --output-on-failure || exit 0
      - name: run sonarscanner
        run:  |
          ls -alh build/testresult
          sonar-scanner -X > build/testresult/output.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v2.2.2
        with:
          name: Testresults_${{matrix.build_type}}
          path: build/testresult

